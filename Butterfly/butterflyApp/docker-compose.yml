version: '3.3'
services:
  mongodb:
    image: mongo:4.0.10
    container_name: mongodb
    networks:
      - butterfly-network
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db

  web-app:
    build:
      context: ./
      dockerfile: ./web-app/Dockerfile
    container_name: web-app
    networks:
      - butterfly-network
    ports:
      - "30000:80"
    depends_on:
      - mongodb

  zookeeper:
    image: zookeeper:3.4
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - butterfly-network
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/data
      - zookeeper-datalog:/datalog

  kafka:
    image: wurstmeister/kafka:2.12-2.2.1
    container_name: kafka
    hostname: kafka
    networks:
      - butterfly-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_CREATE_TOPICS: "redmine:1:1, gitlab:1:1, email:1:1, telegram:1:1, slack:1:1" # topic:partition:replicas
    depends_on:
      - zookeeper

  manager:
    build:
      context: ./
      dockerfile: ./manager/Dockerfile
    container_name: manager
    networks:
      - butterfly-network
    depends_on:
      - mongodb
      - zookeeper
      - kafka

  redmine-producer:
    build:
      context: ./
      dockerfile: ./producers/redmine-producer/Dockerfile
    container_name: redmine-producer
    networks:
      - butterfly-network
    ports:
      - "30020:5000"
    depends_on:
      - kafka
      - manager

  gitlab-producer:
    build:
      context: ./
      dockerfile: ./producers/gitlab-producer/Dockerfile
    container_name: gitlab-producer
    networks:
      - butterfly-network
    ports:
      - "30021:5000"
    depends_on:
      - kafka
      - manager

  email-consumer:
    build:
      context: ./
      dockerfile: ./consumers/email-consumer/Dockerfile
    container_name: email-consumer
    networks:
      - butterfly-network
    depends_on:
      - mongodb
      - kafka
      - manager

  telegram-consumer:
    build:
      context: ./
      dockerfile: ./consumers/telegram-consumer/Dockerfile
    container_name: telegram-consumer
    networks:
      - butterfly-network
    depends_on:
      - mongodb
      - kafka
      - manager

  slack-consumer:
    build:
      context: ./
      dockerfile: ./consumers/slack-consumer/Dockerfile
    container_name: slack-consumer
    networks:
      - butterfly-network
    depends_on:
      - mongodb
      - kafka
      - manager

networks:
  butterfly-network:

volumes:
  mongodb-data:
  zookeeper-data:
  zookeeper-datalog:
